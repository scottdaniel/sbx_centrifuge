# -*- mode: Snakemake -*-

import logging

TARGET_CENTRIFUGE = [
        str(CLASSIFY_FP/'centrifuge'/'summary'/'all_hits.txt'),
        str(CLASSIFY_FP/'centrifuge'/'summary'/'centrifuge_summary.tsv')
]

rule all_centrifuge:
    input:
        TARGET_CENTRIFUGE

rule make_reports:
    output:
        hit_summary = str(CLASSIFY_FP/'centrifuge'/'summary'/'all_hits.txt'),
        tsv_summary = str(CLASSIFY_FP/'centrifuge'/'summary'/'centrifuge_summary.tsv')
    log:
        str(CLASSIFY_FP/'centrifuge'/'logs'/'hits_summary.log'),
        str(CLASSIFY_FP/'centrifuge'/'logs'/'tsv_summary.log')
    input:
        hits = expand(str(CLASSIFY_FP/'centrifuge'/'raw'/'{sample}.hits'), sample = Samples.keys()),
        tsvs = expand(str(CLASSIFY_FP/'centrifuge'/'reports'/'{sample}.report.tsv'), sample = Samples.keys())
    run:
        write_hit(input.hits, output.hit_summary, log[0])
        write_tsv(input.tsvs, output.tsv_summary, log[1])

rule run_centrifuge:
    output:
        cent_out = str(CLASSIFY_FP/'centrifuge'/'raw'/'{sample}.hits'),
        tsv_out = str(CLASSIFY_FP/'centrifuge'/'reports'/'{sample}.report.tsv')
    input:
        pair = expand(str(QC_FP/'decontam'/'{sample}_{rp}.fastq.gz'),
                      sample = "{sample}",
                      rp = Pairs)
    params:
        index = Cfg['sbx_centrifuge']['index']
    log:
        str(CLASSIFY_FP/'centrifuge'/'logs'/'centrifuge_{sample}.error')
    threads:
        Cfg['sbx_centrifuge']['threads']
    conda:
        "sbx_centrifuge_env.yml"
    shell:
        """

        centrifuge -p {threads} -x {params.index} \
        -1 {input.pair[0]} -2 {input.pair[1]} \
        -S {output.cent_out} \
        --report-file {output.tsv_out} \
        2> {log}

        """

# ----------------------------
# ----- Helper functions -----
# ----------------------------
def write_tsv(files, out_fp, log):
    """collapse tsv files"""
    logger = logging.getLogger('summariz tsv log')
    fh = logging.FileHandler(str(log))
    fh.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    logger.addHandler(fh)

    try:
        logger.info('Starting operation!')

        tax = dict()
        num_flds = ['numReads', 'numUniqueReads']

        for fnum, file in enumerate(files):
            print('    {:4}: {}'.format(fnum + 1, os.path.basename(file)))
            with open(file) as csvfile:
                reader = csv.DictReader(csvfile, delimiter='\t')
                for row in reader:
                    tax_id = row['taxID']
                    if not tax_id in tax:
                        tax[tax_id] = dict()
                        for fld in row.keys():
                            tax[tax_id][fld] = int(row[fld]) \
                                    if fld in num_flds else row[fld]
                    else:
                        for fld in num_flds:
                            tax[tax_id][fld] += int(row[fld])

        with open(out_fp, 'w') as out_fh:

            # Write the headers
            flds = ['name', 'taxID', 'taxRank', 'genomeSize'] + \
                    num_flds + ['abundance']

            out_fh.write("\t".join(flds) + '\n')

            total_reads = sum([tax[s]['numReads'] for s in tax])

            for tax_id in sorted(tax.keys(), key=int):
                species = tax[tax_id]

                species['abundance'] = round(species['numReads'] / total_reads, 2)

                out_fh.write('\t'.join([str(species[f]) for f in flds]) + '\n')

        logger.info('Ended!')
    
    except Exception as e:
        logger.error(e, exc_info=True)

# --------------------------------------------------
def write_hit(files, out_fp, log):
    """collapse hit files"""
    logger = logging.getLogger('summarize hits log')
    fh = logging.FileHandler(str(log))
    fh.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    logger.addHandler(fh)

    try:
        logger.info('Starting operation!')

        for fnum, file in enumerate(files):
            print('    {:4}: {}'.format(fnum + 1, os.path.basename(file)))
            in_fh = open(file, 'r')
            hdr = in_fh.readline()

            with open(out_fp, 'w') as out_fh:

                if fnum == 0:
                    out_fh.write(hdr)

                for line in in_fh:
                    out_fh.write(line)
        logger.info('Ended!')
        
    except Exception as e:
        logger.error(e, exc_info=True)


